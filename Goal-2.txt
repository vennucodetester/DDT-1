We will delete the inputs_widget.py file and the live_calculation_widget.py file. They are confusing and unnecessary. We will also remove the old simple_calculation_widget.py.Our new plan is to add an "Enter Inputs" button directly to the "Calculations" tab. This button will open a pop-up dialog to enter the 7 required inputs.This will also fix the tab naming discrepancies.Your Task: A 4-Phase PlanPhase 1: Create the New "Input Dialog"Create a new file named input_dialog.py.This file will contain a new class, InputDialog, that inherits from QDialog.This dialog must have:A QFormLayout.7 QLineEdit fields for the 7 "Rated Performance Inputs" (e.g., rated_capacity_btu_hr, m_dot_rated_lb_hr, rated_displacement_ft3, etc., from goal.md)."OK" and "Cancel" buttons.It must have a method get_data() that returns a dictionary of the 7 values, converted to floats.It must also have a method set_data(data) that pre-fills the 7 fields if data is loaded from a session.Phase 2: Clean Up app.pyThis is critical. We must remove all the "dead" tabs that are causing confusion and fix the tab names.Open app.py.Delete all import lines for:SimpleCalculationWidgetLiveCalculationWidgetInputsWidgetDelete all self.xxx = ... lines for:self.calculation_widget (the simple one)self.live_calc_widget (the "Performance" tab)self.inputs_widget (the "Inputs" tab)Go to the setup_tabs method.Delete all self.tabs.addTab(...) lines for:self.calculation_widget ("P-h Calculations")self.live_calc_widget ("Performance")self.inputs_widget ("Inputs")Find the line that adds the ph_diagram_widget.Rename the tab to match the user's screenshot. Change it from "P-h Diag" to "P-h Interactive".After this, your setup_tabs method should be clean and only show the tabs the user actually sees. It will look something like this:    def setup_tabs(self):
        # ... (setup) ...
        self.tabs.addTab(self.diagram_widget, "Diagram")
        self.tabs.addTab(self.graph_widget, "Graph")
        self.tabs.addTab(self.comparison_widget, "Comparison")
        self.tabs.addTab(self.calculations_widget, "Calculations")
        self.tabs.addTab(self.ph_diagram_widget, "P-h Interactive") # <-- RENAMED
        # ... (return) ...
Phase 3: Modify calculations_widget.pyThis widget will now control the inputs.At the top of the layout (e.g., in a new QHBoxLayout), add a QPushButton labeled "Enter Rated Inputs".Create a method open_input_dialog and connect this button's clicked signal to it.This method must:Import InputDialog from input_dialog.py.Create an instance of InputDialog.Call set_data() to pre-fill it with any current values from self.data_manager.rated_inputs.If the user clicks "OK" (i.e., dialog.exec() == QDialog.DialogCode.Accepted):Get the dictionary of 7 values using dialog.get_data().Save this dictionary to self.data_manager.rated_inputs.Optionally, immediately re-run the calculations by calling self.run_calculations().Modify run_calculations: This method must still have the "guard clause" we discussed.At the very beginning, check self.data_manager.rated_inputs for the 7 required values.If they are missing:Show a QMessageBox.warning with the message:"Missing Inputs""Please click the 'Enter Rated Inputs' button and fill in all 7 'Rated Performance Inputs' fields before running calculations."Do not proceed with the calculation.Phase 4: Modify ph_diagram_widget.pyThis widget also needs to check for inputs before it can plot.In its load_filtered_data method (which is called by the "Calculations" tab), check if the self.data_manager.rated_inputs are filled.If they are not filled, do not attempt to plot. You can just return early. The "Calculations" tab will have already shown the error message.
